{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write your code here\nvar fieldOfGame = document.querySelector(\"tbody\");\nvar button = document.querySelector(\".button\");\nvar gameScore = document.querySelector(\".game-score\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar rowsOfCells = 4;\nvar board;\nvar points = 0;\nbutton.addEventListener(\"click\", function() {\n    button.classList.replace(\"start\", \"restart\");\n    button.innerText = \"Restart\";\n    messageStart.classList.add(\"hidden\");\n    messageWin.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n    startGame();\n});\nfunction startGame() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    points = 0;\n    gameScore.innerText = points;\n    placeBlocks();\n    placeBlocks();\n}\nfunction emptyBlock() {\n    for(var i = 0; i < rowsOfCells; i++){\n        if (board[i].includes(0)) return true;\n    }\n    return false;\n}\nfunction placeBlocks() {\n    while(emptyBlock()){\n        var randomRow = Math.floor(Math.random() * rowsOfCells);\n        var randomCol = Math.floor(Math.random() * rowsOfCells);\n        if (board[randomRow][randomCol] === 0) {\n            var number = Math.random() < 0.9 ? 2 : 4;\n            board[randomRow][randomCol] = number;\n            break;\n        }\n    }\n    setCells();\n}\nfunction loseGame() {\n    if (emptyBlock()) return false;\n    for(var r = 0; r < rowsOfCells; r++)for(var c = 0; c < rowsOfCells; c++){\n        if (board[r][c] === board[r][c + 1]) return false;\n    }\n    for(var r1 = 0; r1 < rowsOfCells - 1; r1++)for(var c1 = 0; c1 < rowsOfCells; c1++){\n        if (board[r1][c1] === board[r1 + 1][c1]) return false;\n    }\n    return true;\n}\nfunction setCells() {\n    for(var r = 0; r < rowsOfCells; r++)for(var c = 0; c < rowsOfCells; c++){\n        var currentCell = fieldOfGame.rows[r].cells[c];\n        var num = board[r][c];\n        currentCell.innerText = \"\";\n        currentCell.classList.value = \"\";\n        currentCell.classList.add(\"field-cell\");\n        if (num > 0) {\n            currentCell.innerText = num;\n            currentCell.classList.add(\"field-cell--\".concat(num));\n        }\n        if (num === 2048) {\n            messageWin.classList.remove(\"hidden\");\n            button.classList.replace(\"restart\", \"start\");\n        }\n    }\n    if (loseGame()) messageLose.classList.remove(\"hidden\");\n}\nfunction removeEmptyBlocks(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n}\nfunction move(row) {\n    var newRow = removeEmptyBlocks(row);\n    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        points += newRow[i];\n        gameScore.innerText = points;\n    }\n    newRow = removeEmptyBlocks(newRow);\n    while(newRow.length < rowsOfCells)newRow.push(0);\n    return newRow;\n}\nfunction moveLeft() {\n    for(var r = 0; r < rowsOfCells; r++){\n        var row = board[r];\n        row = move(row);\n        board[r] = row;\n    }\n}\nfunction moveRight() {\n    for(var r = 0; r < rowsOfCells; r++){\n        var row = board[r].reverse();\n        row = move(row).reverse();\n        board[r] = row;\n    }\n}\nfunction moveUp() {\n    for(var c = 0; c < rowsOfCells; c++){\n        var column = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        column = move(column);\n        for(var r = 0; r < rowsOfCells; r++)board[r][c] = column[r];\n    }\n}\nfunction moveDown() {\n    for(var c = 0; c < rowsOfCells; c++){\n        var column = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ].reverse();\n        column = move(column).reverse();\n        for(var r = 0; r < rowsOfCells; r++)board[r][c] = column[r];\n    }\n}\nfunction saveBoardState() {\n    return JSON.parse(JSON.stringify(board));\n}\nfunction isBoardStateChanged(originalBoard, newBoard) {\n    return JSON.stringify(originalBoard) !== JSON.stringify(newBoard);\n}\ndocument.addEventListener(\"keyup\", function(e) {\n    e.preventDefault();\n    var originalBoard = saveBoardState();\n    switch(e.code){\n        case \"ArrowLeft\":\n            moveLeft();\n            break;\n        case \"ArrowRight\":\n            moveRight();\n            break;\n        case \"ArrowUp\":\n            moveUp();\n            break;\n        case \"ArrowDown\":\n            moveDown();\n            break;\n    }\n    if (isBoardStateChanged(originalBoard, board)) {\n        placeBlocks();\n        setCells();\n    }\n});\n\n//# sourceMappingURL=index.96ec0e35.js.map\n","'use strict';\n\n// write your code here\nconst fieldOfGame = document.querySelector('tbody');\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst rowsOfCells = 4;\nlet board;\nlet points = 0;\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  startGame();\n});\n\nfunction startGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  points = 0;\n  gameScore.innerText = points;\n\n  placeBlocks();\n  placeBlocks();\n}\n\nfunction emptyBlock() {\n  for (let i = 0; i < rowsOfCells; i++) {\n    if (board[i].includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction placeBlocks() {\n  while (emptyBlock()) {\n    const randomRow = Math.floor((Math.random() * rowsOfCells));\n    const randomCol = Math.floor((Math.random() * rowsOfCells));\n\n    if (board[randomRow][randomCol] === 0) {\n      const number = Math.random() < 0.9 ? 2 : 4;\n\n      board[randomRow][randomCol] = number;\n      break;\n    }\n  }\n\n  setCells();\n}\n\nfunction loseGame() {\n  if (emptyBlock()) {\n    return false;\n  }\n\n  for (let r = 0; r < rowsOfCells; r++) {\n    for (let c = 0; c < rowsOfCells; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rowsOfCells - 1; r++) {\n    for (let c = 0; c < rowsOfCells; c++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction setCells() {\n  for (let r = 0; r < rowsOfCells; r++) {\n    for (let c = 0; c < rowsOfCells; c++) {\n      const currentCell = fieldOfGame.rows[r].cells[c];\n      const num = board[r][c];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field-cell');\n\n      if (num > 0) {\n        currentCell.innerText = num;\n        currentCell.classList.add(`field-cell--${num}`);\n      }\n\n      if (num === 2048) {\n        messageWin.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (loseGame()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction removeEmptyBlocks(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction move(row) {\n  let newRow = removeEmptyBlocks(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      points += newRow[i];\n\n      gameScore.innerText = points;\n    }\n  }\n\n  newRow = removeEmptyBlocks(newRow);\n\n  while (newRow.length < rowsOfCells) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < rowsOfCells; r++) {\n    let row = board[r];\n\n    row = move(row);\n    board[r] = row;\n  }\n}\n\nfunction moveRight() {\n  for (let r = 0; r < rowsOfCells; r++) {\n    let row = board[r].reverse();\n\n    row = move(row).reverse();\n    board[r] = row;\n  }\n}\n\nfunction moveUp() {\n  for (let c = 0; c < rowsOfCells; c++) {\n    let column = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    column = move(column);\n\n    for (let r = 0; r < rowsOfCells; r++) {\n      board[r][c] = column[r];\n    }\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < rowsOfCells; c++) {\n    let column = [board[0][c], board[1][c], board[2][c], board[3][c]].reverse();\n\n    column = move(column).reverse();\n\n    for (let r = 0; r < rowsOfCells; r++) {\n      board[r][c] = column[r];\n    }\n  }\n}\n\nfunction saveBoardState() {\n  return JSON.parse(JSON.stringify(board));\n}\n\nfunction isBoardStateChanged(originalBoard, newBoard) {\n  return JSON.stringify(originalBoard) !== JSON.stringify(newBoard);\n}\n\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n\n  const originalBoard = saveBoardState();\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  if (isBoardStateChanged(originalBoard, board)) {\n    placeBlocks();\n    setCells();\n  }\n});\n"],"names":["board","fieldOfGame","document","querySelector","button","gameScore","messageStart","messageWin","messageLose","points","emptyBlock","i","includes","placeBlocks","randomRow","Math","floor","random","randomCol","number","setCells","r","c","currentCell","rows","cells","num","innerText","classList","value","add","concat","remove","replace","loseGame","r1","rowsOfCells","c1","removeEmptyBlocks","row","filter","move","newRow","length","push","addEventListener","e","preventDefault","newBoard","originalBoard","JSON","parse","stringify","code","moveLeft","moveRight","reverse","moveUp","column","moveDown"],"version":3,"file":"index.96ec0e35.js.map"}